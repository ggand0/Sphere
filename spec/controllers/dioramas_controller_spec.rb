require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe DioramasController do
   fixtures :stages, :model_data

  # This should return the minimal set of attributes required to create a valid
  # Diorama. As you add validations to Diorama, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {
      title: "testing title",
      stage: stages(:stage),
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # DioramasController. Be sure to keep this updated too.
  let(:valid_session) { { stage_id: 0, model_id: 0 } }

  describe "GET index" do
    it "assigns all dioramas as @dioramas" do
      diorama = Diorama.create! valid_attributes
      get :index, {}, valid_session
      assigns(:dioramas).should eq([diorama])
    end
  end

  describe "GET show" do
    it "assigns the requested diorama as @diorama" do
      diorama = Diorama.create! valid_attributes
      get :show, {id: diorama.to_param}, valid_session
      assigns(:diorama).should eq(diorama)
    end
  end

  describe "GET new" do
    it "assigns a new diorama as @diorama" do
      get :new, {}, valid_session
      assigns(:diorama).should be_a_new(Diorama)
    end
  end

  describe "GET edit" do
    it "assigns the requested diorama as @diorama" do
      diorama = Diorama.create! valid_attributes
      get :edit, {id: diorama.to_param}, valid_session
      assigns(:diorama).should eq(diorama)
    end
  end

  describe "POST create" do
    before :each do
      @create_attr = {
        title: "testing title",
        stage: 0,
        model_transforms:
          "[{\"id\":0,\"pos\":[0,0,0]}]"
      }
    end
    
    describe "with valid params" do
      it "creates a new Diorama" do
        expect {
          post :create, {diorama: @create_attr }, valid_session
        }.to change(Diorama, :count).by(1)
      end

      it "assigns a newly created diorama as @diorama" do
        post :create, {diorama: @create_attr}, valid_session
        assigns(:diorama).should be_a(Diorama)
        assigns(:diorama).should be_persisted
      end

      it "redirects to the created diorama" do
        post :create, {diorama: @create_attr}, valid_session
        response.should redirect_to(Diorama.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved diorama as @diorama" do
        # Trigger the behavior that occurs when invalid params are submitted
        #Diorama.any_instance.stub(:save).and_return(false)
        Diorama.any_instance.stub(:save!).and_raise(ActiveRecord::RecordInvalid.new(Diorama.new))
        post :create, {diorama: @create_attr}, valid_session
        assigns(:diorama).should be_a_new(Diorama)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Diorama.any_instance.stub(:save!).and_raise(ActiveRecord::RecordInvalid.new(Diorama.new))
        post :create, {diorama: @create_attr}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do

    before :each do
      @update_attr = {
        title: "updated title",
        #stage: 0,
        model_transforms: "[{\"id\":0,\"pos\":[0,0,0]}]"
      }
      objects = ActiveSupport::JSON.decode(@update_attr[:model_transforms])
      transforms = objects.map do |obj|
        ModelTransform.new(transform: obj['pos'].to_s, model_datum: ModelDatum.find(obj['id']))
      end
      @updated_attr = {
        title: "updated title",
        #stage: stages(:stage),
        #model_transforms: transforms
        #model_transforms: [ModelTransform.new( transform: "[0, 0, 0]", model_datum: ModelDatum.find(0) )]
        #model_transforms: "[#<ModelTransform id: nil, created_at: nil, updated_at: nil, transform: \"[0, 0, 0]\", diorama_id: nil, model_datum_id: 0>]"
      }
    end

    describe "with valid params" do
      it "updates the requested diorama" do
        ModelTransform.delete_all# テスト実行の順番によって要素が変わるので全消去しておく
        diorama = Diorama.create! valid_attributes
        # Assuming there are no other dioramas in the database, this
        # specifies that the Diorama created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Diorama.any_instance.should_receive(:update_attributes).with(@updated_attr)
        put :update, {id: diorama.to_param, diorama: @update_attr}, valid_session
        diorama.reload
        diorama.model_transforms.reload
        puts diorama.model_transforms
        puts ModelTransform.all
        #diorama.title.should eq @updated_attr[:title]
        ModelTransform.first.diorama.should eq diorama
        ModelTransform.first.model_datum.should eq model_data(:model_datum)
      end

      it "assigns the requested diorama as @diorama" do
        diorama = Diorama.create! valid_attributes
        put :update, {id: diorama.to_param, diorama: @update_attr}, valid_session
        assigns(:diorama).should eq(diorama)
      end

      it "redirects to the diorama" do
        diorama = Diorama.create! valid_attributes
        put :update, {id: diorama.to_param, diorama: @update_attr}, valid_session
        response.should redirect_to(diorama)
      end
    end

    describe "with invalid params" do
      it "assigns the diorama as @diorama" do
        diorama = Diorama.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Diorama.any_instance.stub(:update_attributes).and_return(false)
        put :update, {id: diorama.to_param, diorama: @update_attr}, valid_session
        assigns(:diorama).should eq(diorama)
      end

      it "re-renders the 'edit' template" do
        diorama = Diorama.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Diorama.any_instance.stub(:update_attributes).and_return(false)
        put :update, {id: diorama.to_param, diorama: @update_attr}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested diorama" do
      diorama = Diorama.create! valid_attributes
      expect {
        delete :destroy, {id: diorama.to_param}, valid_session
      }.to change(Diorama, :count).by(-1)
    end

    it "redirects to the dioramas list" do
      diorama = Diorama.create! valid_attributes
      delete :destroy, {id: diorama.to_param}, valid_session
      response.should redirect_to(dioramas_url)
    end
  end

end
